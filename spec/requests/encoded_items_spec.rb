require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/encoded_items", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # EncodedItem. As you add validations to EncodedItem, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    {
        descriptor: 'Some descriptor',
        value: 'Hello world!'
    }
  end

  describe "GET /index" do
    it "renders a successful response" do
      EncodedItem.create! valid_attributes
      get encoded_items_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      encoded_item = EncodedItem.create! valid_attributes
      get encoded_item_url(encoded_item)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_encoded_item_url
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with a successful save" do
      it "creates a new EncodedItem" do
        expect {
          post encoded_items_url, params: { encoded_item: valid_attributes }
        }.to change(EncodedItem, :count).by(1)
      end

      it "redirects to the created encoded_item" do
        post encoded_items_url, params: { encoded_item: valid_attributes }
        expect(response).to redirect_to(encoded_item_url(EncodedItem.last))
      end
    end

    context 'with an unsuccessful save' do
      before { allow_any_instance_of(EncodedItem).to receive(:save).and_return(false) }
      
      it 'should have a status of unprocessable entity' do
        post encoded_items_url, params: { encoded_item: valid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested encoded_item" do
      encoded_item = EncodedItem.create! valid_attributes
      expect {
        delete encoded_item_url(encoded_item)
      }.to change(EncodedItem, :count).by(-1)
    end

    it "redirects to the encoded_items list" do
      encoded_item = EncodedItem.create! valid_attributes
      delete encoded_item_url(encoded_item)
      expect(response).to redirect_to(encoded_items_url)
    end
  end
end
